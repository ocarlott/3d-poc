import * as THREE from "three";
import { TextureOption } from "./type";
export declare class Boundary {
    readonly group: THREE.Group;
    readonly raycaster: THREE.Raycaster;
    readonly mouseHelper: THREE.Mesh<THREE.BoxGeometry, THREE.MeshNormalMaterial>;
    static imageIconMaterial: THREE.MeshPhongMaterial;
    static moveIconMaterial: THREE.MeshPhongMaterial;
    static decalMaterial: THREE.MeshPhongMaterial;
    readonly uploadArtworkPlaceholder: THREE.Mesh;
    artwork: THREE.Mesh | null;
    artworkSize: THREE.Vector3;
    artworkRatio: number;
    readonly size: THREE.Vector3;
    center: THREE.Vector3;
    readonly canvas: THREE.Mesh;
    readonly camera: THREE.PerspectiveCamera;
    readonly modelThickness: number;
    translateControl: THREE.Mesh | null;
    translateControlSize: THREE.Vector3;
    isEditing: boolean;
    normal: THREE.Vector3;
    crystalizeStyle: TextureOption;
    originalTexture: THREE.Texture | null;
    name: string;
    constructor(camera: THREE.PerspectiveCamera, canvas: THREE.Mesh, modelThickness: number);
    get id(): number;
    hasPlaceholderId: (id: number) => boolean;
    setShowBoundary: (value: boolean) => void;
    calculateArtworkSize: (imageWidth: number, imageHeight: number) => THREE.Vector3;
    addArtwork: (texture: THREE.Texture) => void;
    updateArtworkPosition: (center: THREE.Vector3, orientation: THREE.Euler) => void;
    toggleEditting: (forcedValue?: boolean) => void;
    setBoundaryStateOnEditing: () => void;
    hasArtwork: (id: number) => boolean;
    updateArtworkSize: (ratio: number) => void;
    hidePlaceholder: () => void;
    computeArtworkOnBoundary: () => void;
    applyCrystalization: (style: TextureOption) => Promise<void>;
}
